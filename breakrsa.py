from Crypto.Util.number import *
import gmpy2

def isqrt(n):
    x = n
    y = (x + n // x) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x


def fermat(n):
    a = isqrt(n)
    b2 = a*a - n
    b = isqrt(n)
    count = 0
    while b*b != b2:
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2)
        count += 1
    p = a+b
    q = a-b
    if n == p * q:
        return p, q
    else:
        return None

n1 = 16071361231296930025432530593725652458680966435374980256117475023624926211301447201719757510728426458873856664838360526244197692562696266569188624723866518523490476926570238092900496785596316735678616569682681151268479541755943416500878350162405258289554163741186202215472949173276988715177308644084537838759071829403339470955385291378876297085154841874037055494305031966609439294754118315585318559020230136143630644584090733403001920682892286736742777839464236665357862475759887519642670048275375360274445251030058091194538881485358671465693511924845045310176175403895143052075435244839114141127478828919678891125781
n2 = 5183282802114471203447001976647281463825818530825497253405909339523710954505350059122929185430435360087367009308026297465290301134526984040023261794070557150409976753823060086771218443154818283031650508188596478637115274067163706116180797841446352552616898372763303979918463832589289578775471924676397895305385600033650756712130299054170893809664621386998782176202240567542759542836708792665025337112621119109420855988821980245130848777538731648559070091534164739231272139821730145472767261755089690069618762003249348070045933312831685895181987412248211772045823170281202827117090331790538432039171551250794298972139
e = 67891
enc_cool_part1 = 3647495583657563327705474312043490287175525423338677541860285430601422129035152309465047799779283445114446773785648306729075656027699140467699815074037620214546577547860134827813606374217122309791745907143039664855422536247681248612977983329434926957572646019608861006335301319762867682426698342123960762280377627862374054892032077232651899001598019937027392732978509567273539298424698577008765026123531735810334517601853339171899482490470082432509119302833322955797677153252010836103536660179993419777786704379922103737524685449319316668342402919581453701758192214690880452229670077676742565972613763942385441400278
enc_cool_part2 = 4225168925849086423106615154212572484115309764831711796752468473150764478113485535946563502307377201078987755124842160500022996465245520564144271538788235343241837431217400676297690295167870577907585720986594093496595172001655982274750137973814200077475741133610746238536200641413376848411764214087343771834346413718501918660498032445102204913746906697418562093104634598731849741123173356065101686043951683085156624547338423290284593953724376259047428186514280526544510346119866536479547419394318912252106897879344509542688372575206982828670401586688430507141140849663014112933974485802487340142938201330918931428849

rand2, rand1 = fermat(n2)
phin2 = (rand1 - 1)*(rand2 - 1)
d2 = long(gmpy2.invert(e, phin2))
cool_part1 = pow(enc_cool_part2, d2, n2)
print long_to_bytes(cool_part1)

def previousPrime(n):
    if(n % 2 == 0):
        n = n - 1
    while(isPrime(n) == False):
        n = n - 2
    return n

max_hidden = rand1 - cool_part1
min_hidden = previousPrime(rand1 - 1) - cool_part1


def hasIntSolution(a,b,c):
    delta = b**2 - 4*a*c
    _sqrt = gmpy2.iroot(delta,2)
    if(_sqrt[1] == True):
		# ac < 0 so there is one solution that is less than 0
		# get the non-negative solution and caculate p as p = k * q + hidden
        return (-b + long(_sqrt[0]))/(2*a), a*(-b + long(_sqrt[0]))/(2*a) + b
    else:
        return False


def attack_rsa():
    for k in range(1, 100000): #no need to loop that much I swear, but doesn't matter
        for hidden in range(min_hidden, max_hidden):
            result = hasIntSolution(k, hidden, -n1) #k*q^2 - hidden * q - n1 = 0
            if(result != False):
                return result

p,q = attack_rsa()
phin = (p-1)*(q-1)
d = long(gmpy2.invert(e,phin))
cool_part2 = pow(enc_cool_part1,d,n1)
print long_to_bytes(cool_part2)

flag = long_to_bytes(cool_part1) + long_to_bytes(cool_part2)
print flag
# delta = hidden**2 + 4*n1